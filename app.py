# # # Ver 1
# # import streamlit as st
# # import pandas as pd
# # import os
# # import shutil
# # import zipfile
# # import io
# # from datetime import datetime, timedelta
# # from PIL import Image

# # # === Constants ===
# # CSV_FILE = "du_lieu_bat_dong_san.csv"
# # IMAGE_DIR = "anh_nha"
# # SHARED_DIR = "chia_se"
# # BACKUP_DIR = "backups"
# # IMAGE_WIDTH = 120

# # # === Ensure necessary directories ===
# # os.makedirs(IMAGE_DIR, exist_ok=True)
# # os.makedirs(SHARED_DIR, exist_ok=True)
# # os.makedirs(BACKUP_DIR, exist_ok=True)

# # # === Auto Backup Every 3 Days ===
# # def auto_backup():
# #     today = datetime.today()
# #     for fname in os.listdir(BACKUP_DIR):
# #         if fname.endswith("_backup.csv"):
# #             last_backup = datetime.strptime(fname.split("_")[0], "%Y%m%d")
# #             if today - last_backup < timedelta(days=3):
# #                 return  # already backed up within 3 days

# #     # Backup CSV
# #     csv_backup_path = os.path.join(BACKUP_DIR, f"{today.strftime('%Y%m%d')}_backup.csv")
# #     if os.path.exists(CSV_FILE):
# #         shutil.copy(CSV_FILE, csv_backup_path)

# #     # Backup images to ZIP
# #     zip_buffer = io.BytesIO()
# #     with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
# #         for foldername, subfolders, filenames in os.walk(IMAGE_DIR):
# #             for filename in filenames:
# #                 filepath = os.path.join(foldername, filename)
# #                 arcname = os.path.relpath(filepath, IMAGE_DIR)
# #                 zipf.write(filepath, arcname)
# #     with open(os.path.join(BACKUP_DIR, f"{today.strftime('%Y%m%d')}_images.zip"), "wb") as f:
# #         f.write(zip_buffer.getvalue())

# # auto_backup()

# # # === Load or initialize data ===
# # if os.path.exists(CSV_FILE):
# #     df = pd.read_csv(CSV_FILE)
# # else:
# #     df = pd.DataFrame(columns=["Lo·∫°i h√¨nh", "D·ª± √°n", "Gi√°", "SƒêT", "L·ª£i nhu·∫≠n", "Notice", "Th∆∞ m·ª•c ·∫£nh"])

# # def save_data():
# #     df.to_csv(CSV_FILE, index=False)

# # # === Streamlit UI ===
# # st.set_page_config(page_title="Qu·∫£n l√Ω BƒêS", layout="wide")
# # st.title("üèòÔ∏è ·ª®ng d·ª•ng Qu·∫£n l√Ω B·∫•t ƒë·ªông s·∫£n")

# # # === Session state ===
# # if "reset_form" not in st.session_state:
# #     st.session_state.reset_form = False
# # if "search_triggered" not in st.session_state:
# #     st.session_state.search_triggered = False
# # if "edit_trigger" not in st.session_state:
# #     st.session_state.edit_trigger = False
# # if "edit_index" not in st.session_state:
# #     st.session_state.edit_index = None

# # # === Reset logic ===
# # if st.session_state.reset_form:
# #     for key in ["loai_hinh", "du_an", "price", "phone", "profit", "notice"]:
# #         st.session_state[key] = ""
# #     st.session_state.reset_form = False

# # # === Add Form ===
# # st.header("‚ûï Th√™m d·ªØ li·ªáu")
# # with st.form("add_form"):
# #     col1, col2 = st.columns(2)
# #     with col1:
# #         loai_hinh = st.text_input("Lo·∫°i h√¨nh", key="loai_hinh", max_chars=50)
# #         price = st.text_input("Gi√°", key="price", max_chars=20)
# #         profit = st.text_input("L·ª£i nhu·∫≠n", key="profit", max_chars=20)
# #     with col2:
# #         du_an = st.text_input("D·ª± √°n", key="du_an", max_chars=50)
# #         phone = st.text_input("SƒêT", key="phone", max_chars=20)
# #         notice = st.text_area("Ghi ch√∫", key="notice", height=80)

# #     uploader_key = f"uploader_{len(df)}" if st.session_state.reset_form else "uploader"
# #     uploaded_files = st.file_uploader("Upload images", accept_multiple_files=True, type=['png', 'jpg', 'jpeg', 'tif'], key=uploader_key)

# #     submitted = st.form_submit_button("üì• Th√™m nh√†")

# #     if submitted:
# #         try:
# #             price_val = float(price)
# #             folder_name = f"{loai_hinh}_{len(df)}"
# #             folder_path = os.path.join(IMAGE_DIR, folder_name)
# #             os.makedirs(folder_path, exist_ok=True)

# #             if uploaded_files:
# #                 for uploaded_file in uploaded_files:
# #                     with open(os.path.join(folder_path, uploaded_file.name), "wb") as f:
# #                         f.write(uploaded_file.read())

# #             new_data = {
# #                 "Lo·∫°i h√¨nh": loai_hinh,
# #                 "D·ª± √°n": du_an,
# #                 "Gi√°": price_val,
# #                 "SƒêT": phone,
# #                 "L·ª£i nhu·∫≠n": profit,
# #                 "Notice": notice,
# #                 "Th∆∞ m·ª•c ·∫£nh": folder_path
# #             }

# #             df = pd.concat([df, pd.DataFrame([new_data])], ignore_index=True)
# #             save_data()
# #             st.success("‚úÖ ƒê√£ th√™m d·ªØ li·ªáu!")
# #             st.session_state.reset_form = True
# #             st.rerun()

# #         except ValueError:
# #             st.error("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng gi√°.")

# # # === Edit Form ===
# # if st.session_state.edit_trigger and st.session_state.edit_index is not None:
# #     st.header("‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin nh√†")
# #     edit_idx = st.session_state.edit_index
# #     edit_row = df.loc[edit_idx]

# #     with st.form("edit_form"):
# #         col1, col2 = st.columns(2)
# #         with col1:
# #             new_loai_hinh = st.text_input("Lo·∫°i h√¨nh", value=edit_row["Lo·∫°i h√¨nh"])
# #             new_price = st.text_input("Gi√°", value=str(edit_row["Gi√°"]))
# #             new_profit = st.text_input("L·ª£i nhu·∫≠n", value=edit_row["L·ª£i nhu·∫≠n"])
# #         with col2:
# #             new_du_an = st.text_input("D·ª± √°n", value=edit_row["D·ª± √°n"])
# #             new_phone = st.text_input("SƒêT", value=edit_row["SƒêT"])
# #             new_notice = st.text_area("Ghi ch√∫", value=edit_row["Notice"], height=80)

# #         uploaded_edit_files = st.file_uploader(
# #             "Upload ·∫£nh m·ªõi (n·∫øu mu·ªën ghi ƒë√®)", 
# #             accept_multiple_files=True, 
# #             type=['png', 'jpg', 'jpeg', 'tif'],
# #             key=f"edit_uploader_{edit_idx}"
# #         )

# #         submitted_edit = st.form_submit_button("üíæ L∆∞u thay ƒë·ªïi")

# #         if submitted_edit:
# #             try:
# #                 new_price_val = float(new_price)
# #                 df.at[edit_idx, "Lo·∫°i h√¨nh"] = new_loai_hinh
# #                 df.at[edit_idx, "D·ª± √°n"] = new_du_an
# #                 df.at[edit_idx, "Gi√°"] = new_price_val
# #                 df.at[edit_idx, "SƒêT"] = new_phone
# #                 df.at[edit_idx, "L·ª£i nhu·∫≠n"] = new_profit
# #                 df.at[edit_idx, "Notice"] = new_notice

# #                 edit_folder_path = df.at[edit_idx, "Th∆∞ m·ª•c ·∫£nh"]
# #                 if uploaded_edit_files:
# #                     for f in os.listdir(edit_folder_path):
# #                         os.remove(os.path.join(edit_folder_path, f))
# #                     for uploaded_file in uploaded_edit_files:
# #                         with open(os.path.join(edit_folder_path, uploaded_file.name), "wb") as f:
# #                             f.write(uploaded_file.read())

# #                 save_data()
# #                 st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!")
# #                 st.session_state.edit_trigger = False
# #                 st.session_state.edit_index = None
# #                 st.rerun()

# #             except ValueError:
# #                 st.error("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng gi√°.")

# # # === Search Section ===
# # st.header("üîç T√¨m ki·∫øm nh√†")

# # col1, col2, col3, col4 = st.columns(4)
# # with col1:
# #     loai_hinh_search = st.text_input("Lo·∫°i h√¨nh (t√¨m)", max_chars=50, key="loai_hinh_search")
# # with col2:
# #     du_an_search = st.text_input("D·ª± √°n (t√¨m)", max_chars=50, key="du_an_search")
# # with col3:
# #     min_price = st.text_input("Gi√° t·ªëi thi·ªÉu", max_chars=20, key="min_price")
# # with col4:
# #     max_price = st.text_input("Gi√° t·ªëi ƒëa", max_chars=20, key="max_price")

# # if st.button("üîé T√¨m ki·∫øm"):
# #     st.session_state.search_triggered = True

# # def filter_data(df):
# #     filtered = df.copy()
# #     try:
# #         min_p = float(min_price) if min_price else 0
# #         max_p = float(max_price) if max_price else float('inf')
# #     except:
# #         st.error("‚ùå Gi√° kh√¥ng h·ª£p l·ªá")
# #         return pd.DataFrame()

# #     if loai_hinh_search:
# #         filtered = filtered[filtered["Lo·∫°i h√¨nh"].astype(str).str.contains(loai_hinh_search, case=False, na=False)]
# #     if du_an_search:
# #         filtered = filtered[filtered["D·ª± √°n"].astype(str).str.contains(du_an_search, case=False, na=False)]

# #     filtered = filtered[(filtered["Gi√°"] >= min_p) & (filtered["Gi√°"] <= max_p)]
# #     return filtered

# # filtered = filter_data(df) if st.session_state.search_triggered else df.copy()

# # # === Display Results ===
# # st.header("üìã Danh s√°ch nh√†")
# # if filtered.empty:
# #     st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.")
# # else:
# #     for idx, row in filtered.iterrows():
# #         st.markdown("---")
# #         cols = st.columns([1, 2])
# #         with cols[0]:
# #             folder_path = row["Th∆∞ m·ª•c ·∫£nh"]
# #             if os.path.exists(folder_path):
# #                 images = []
# #                 for file in os.listdir(folder_path):
# #                     try:
# #                         image = Image.open(os.path.join(folder_path, file))
# #                         images.append(image)
# #                     except:
# #                         continue
# #                 if images:
# #                     st.image(images, width=IMAGE_WIDTH)

# #         with cols[1]:
# #             st.markdown(f"""
# #                 **üè† Lo·∫°i h√¨nh:** {row['Lo·∫°i h√¨nh']}  
# #                 **üì¶ D·ª± √°n:** {row['D·ª± √°n']}  
# #                 **üí∞ Gi√°:** {row['Gi√°']}  
# #                 **üìû SƒêT:** {row['SƒêT']}  
# #                 **üìà L·ª£i nhu·∫≠n:** {row['L·ª£i nhu·∫≠n']}  
# #                 **üìù Ghi ch√∫:** {row['Notice']}
# #             """)

# #             col1, col2, col3 = st.columns(3)
# #             with col1:
# #                 if st.button("üì§ Chia s·∫ª", key=f"share_{idx}"):
# #                     share_folder = os.path.join(SHARED_DIR, f"{row['Lo·∫°i h√¨nh']}_{idx}")
# #                     os.makedirs(share_folder, exist_ok=True)
# #                     info_text = (
# #                         f"üè† Lo·∫°i h√¨nh: {row['Lo·∫°i h√¨nh']}\n"
# #                         f"üì¶ D·ª± √°n: {row['D·ª± √°n']}\n"
# #                         f"üí∞ Gi√°: {row['Gi√°']}\n"
# #                         f"üìù Ghi ch√∫: {row['Notice']}"
# #                     )
# #                     with open(os.path.join(share_folder, "thong_tin.txt"), "w", encoding="utf-8") as f:
# #                         f.write(info_text)
# #                     for file in os.listdir(folder_path):
# #                         shutil.copy(os.path.join(folder_path, file), share_folder)
# #                     st.success(f"‚úÖ ƒê√£ chia s·∫ª t·∫°i: {share_folder}")

# #             with col2:
# #                 if st.button("üóëÔ∏è X√≥a", key=f"delete_{idx}"):
# #                     if os.path.exists(folder_path):
# #                         shutil.rmtree(folder_path)
# #                     df = df.drop(idx).reset_index(drop=True)
# #                     save_data()
# #                     st.success("‚úÖ ƒê√£ x√≥a m·ª•c th√†nh c√¥ng!")
# #                     st.rerun()

# #             with col3:
# #                 if st.button("‚úèÔ∏è Ch·ªânh s·ª≠a", key=f"edit_{idx}"):
# #                     st.session_state["edit_index"] = idx
# #                     st.session_state["edit_trigger"] = True
# #                     st.rerun()

# # # === Backup Section ===
# # st.markdown("### üíæ Sao l∆∞u v√† kh√¥i ph·ª•c")

# # csv_export = df.to_csv(index=False).encode("utf-8-sig")
# # st.download_button("‚¨áÔ∏è T·∫£i xu·ªëng d·ªØ li·ªáu (CSV)", data=csv_export, file_name="du_lieu_bat_dong_san.csv", mime="text/csv")

# # # Download image ZIP
# # def zip_all_images():
# #     zip_buffer = io.BytesIO()
# #     with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
# #         for foldername, subfolders, filenames in os.walk(IMAGE_DIR):
# #             for filename in filenames:
# #                 filepath = os.path.join(foldername, filename)
# #                 arcname = os.path.relpath(filepath, IMAGE_DIR)
# #                 zipf.write(filepath, arcname)
# #     zip_buffer.seek(0)
# #     return zip_buffer

# # if os.listdir(IMAGE_DIR):
# #     image_zip = zip_all_images()
# #     st.download_button("üñºÔ∏è T·∫£i xu·ªëng to√†n b·ªô ·∫£nh", data=image_zip, file_name="anh_bds.zip", mime="application/zip")

# # # Restore both CSV and ZIP
# # st.markdown("### üîÅ Ph·ª•c h·ªìi d·ªØ li·ªáu")

# # restore_csv = st.file_uploader("üì§ T·∫£i l√™n file CSV ƒë√£ sao l∆∞u", type=["csv"])
# # restore_zip = st.file_uploader("üì§ T·∫£i l√™n file ZIP ·∫£nh ƒë√£ sao l∆∞u", type=["zip"])

# # if st.button("‚ôªÔ∏è Ph·ª•c h·ªìi to√†n b·ªô"):
# #     if restore_csv and restore_zip:
# #         try:
# #             df = pd.read_csv(restore_csv)
# #             save_data()
# #             with zipfile.ZipFile(restore_zip, 'r') as zipf:
# #                 zipf.extractall(IMAGE_DIR)
# #             st.success("‚úÖ Ph·ª•c h·ªìi d·ªØ li·ªáu th√†nh c√¥ng!")
# #             st.rerun()
# #         except Exception as e:
# #             st.error(f"‚ùå L·ªói khi ph·ª•c h·ªìi: {e}")
# #     else:
# #         st.warning("‚ö†Ô∏è C·∫ßn c·∫£ CSV v√† ZIP ƒë·ªÉ ph·ª•c h·ªìi to√†n b·ªô d·ªØ li·ªáu.")



# # Full Streamlit real estate app with "Di·ªán t√≠ch" and "Hi·ªán tr·∫°ng" fields and filters

# import streamlit as st
# import pandas as pd
# import os
# import shutil
# import zipfile
# import io
# from datetime import datetime, timedelta
# from PIL import Image

# # === Constants ===
# CSV_FILE = "du_lieu_bat_dong_san.csv"
# IMAGE_DIR = "anh_nha"
# SHARED_DIR = "chia_se"
# BACKUP_DIR = "backups"
# IMAGE_WIDTH = 120

# # === Ensure necessary directories ===
# os.makedirs(IMAGE_DIR, exist_ok=True)
# os.makedirs(SHARED_DIR, exist_ok=True)
# os.makedirs(BACKUP_DIR, exist_ok=True)

# # === Auto Backup Every 3 Days ===
# def auto_backup():
#     today = datetime.today()
#     for fname in os.listdir(BACKUP_DIR):
#         if fname.endswith("_backup.csv"):
#             last_backup = datetime.strptime(fname.split("_")[0], "%Y%m%d")
#             if today - last_backup < timedelta(days=3):
#                 return  # already backed up

#     if os.path.exists(CSV_FILE):
#         shutil.copy(CSV_FILE, os.path.join(BACKUP_DIR, f"{today.strftime('%Y%m%d')}_backup.csv"))

#     zip_buffer = io.BytesIO()
#     with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zipf:
#         for foldername, subfolders, filenames in os.walk(IMAGE_DIR):
#             for filename in filenames:
#                 filepath = os.path.join(foldername, filename)
#                 arcname = os.path.relpath(filepath, IMAGE_DIR)
#                 zipf.write(filepath, arcname)
#     with open(os.path.join(BACKUP_DIR, f"{today.strftime('%Y%m%d')}_images.zip"), "wb") as f:
#         f.write(zip_buffer.getvalue())

# auto_backup()

# # === Load or initialize data ===
# if os.path.exists(CSV_FILE):
#     df = pd.read_csv(CSV_FILE)
# else:
#     df = pd.DataFrame(columns=["Lo·∫°i h√¨nh", "D·ª± √°n", "Gi√°", "SƒêT", "L·ª£i nhu·∫≠n", "Notice", "Th∆∞ m·ª•c ·∫£nh", "Di·ªán t√≠ch", "Hi·ªán tr·∫°ng"])

# def save_data():
#     df.to_csv(CSV_FILE, index=False)

# st.set_page_config(page_title="Qu·∫£n l√Ω BƒêS", layout="wide")
# st.title("üè®Ô∏è ·ª®ng d·ª•ng Qu·∫£n l√Ω B·∫•t ƒë·ªông s·∫£n")

# if "reset_form" not in st.session_state:
#     st.session_state.reset_form = False
# if "search_triggered" not in st.session_state:
#     st.session_state.search_triggered = False
# if "edit_trigger" not in st.session_state:
#     st.session_state.edit_trigger = False
# if "edit_index" not in st.session_state:
#     st.session_state.edit_index = None

# if st.session_state.reset_form:
#     for key in ["loai_hinh", "du_an", "price", "phone", "profit", "notice", "area", "hien_trang"]:
#         st.session_state[key] = ""
#     st.session_state.reset_form = False

# # === Add Form ===
# st.header("‚ûï Th√™m d·ªØ li·ªáu")
# with st.form("add_form"):
#     col1, col2 = st.columns(2)
#     with col1:
#         loai_hinh = st.text_input("Lo·∫°i h√¨nh", key="loai_hinh")
#         price = st.text_input("Gi√°", key="price")
#         profit = st.text_input("L·ª£i nhu·∫≠n", key="profit")
#         area = st.text_input("Di·ªán t√≠ch (m¬≤)", key="area")
#     with col2:
#         du_an = st.text_input("D·ª± √°n", key="du_an")
#         phone = st.text_input("SƒêT", key="phone")
#         notice = st.text_area("Ghi ch√∫", key="notice")
#         hien_trang = st.selectbox("Hi·ªán tr·∫°ng", ["C√≤n", "H·∫øt"], key="hien_trang")

#     uploaded_files = st.file_uploader("Upload images", accept_multiple_files=True, key="uploader")
#     submitted = st.form_submit_button("üìÖ Th√™m nh√†")

#     if submitted:
#         try:
#             price_val = float(price)
#             folder_name = f"{loai_hinh}_{len(df)}"
#             folder_path = os.path.join(IMAGE_DIR, folder_name)
#             os.makedirs(folder_path, exist_ok=True)
#             for file in uploaded_files:
#                 with open(os.path.join(folder_path, file.name), "wb") as f:
#                     f.write(file.read())
#             new_data = {
#                 "Lo·∫°i h√¨nh": loai_hinh,
#                 "D·ª± √°n": du_an,
#                 "Gi√°": price_val,
#                 "SƒêT": phone,
#                 "L·ª£i nhu·∫≠n": profit,
#                 "Notice": notice,
#                 "Th∆∞ m·ª•c ·∫£nh": folder_path,
#                 "Di·ªán t√≠ch": area,
#                 "Hi·ªán tr·∫°ng": hien_trang
#             }
#             df = pd.concat([df, pd.DataFrame([new_data])], ignore_index=True)
#             save_data()
#             st.success("‚úÖ ƒê√£ th√™m d·ªØ li·ªáu!")
#             st.session_state.reset_form = True
#             st.rerun()
#         except:
#             # st.error("‚ùå L·ªói khi th√™m d·ªØ li·ªáu")
#             st.error(" ")

# # === Search Section ===
# st.header("üîç T√¨m ki·∫øm nh√†")
# col1, col2, col3, col4 = st.columns(4)
# with col1:
#     loai_hinh_search = st.text_input("Lo·∫°i h√¨nh (t√¨m)", key="loai_hinh_search")
# with col2:
#     du_an_search = st.text_input("D·ª± √°n (t√¨m)", key="du_an_search")
# with col3:
#     min_price = st.text_input("Gi√° t·ªëi thi·ªÉu", key="min_price")
# with col4:
#     max_price = st.text_input("Gi√° t·ªëi ƒëa", key="max_price")

# col5, col6 = st.columns(2)
# with col5:
#     min_area = st.text_input("Di·ªán t√≠ch t·ªëi thi·ªÉu", key="min_area")
# with col6:
#     max_area = st.text_input("Di·ªán t√≠ch t·ªëi ƒëa", key="max_area")

# hien_trang_filter = st.selectbox("Hi·ªán tr·∫°ng (l·ªçc)", ["T·∫•t c·∫£", "C√≤n", "H·∫øt"], key="hien_trang_filter")

# if st.button("üîé T√¨m ki·∫øm"):
#     st.session_state.search_triggered = True

# def filter_data(df):
#     filtered = df.copy()
#     try:
#         min_p = float(min_price) if min_price else 0
#         max_p = float(max_price) if max_price else float("inf")
#         min_a = float(min_area) if min_area else 0
#         max_a = float(max_area) if max_area else float("inf")
#     except:
#         st.error("‚ùå Nh·∫≠p s·ªë kh√¥ng h·ª£p l·ªá")
#         return pd.DataFrame()

#     filtered = filtered[(filtered["Gi√°"] >= min_p) & (filtered["Gi√°"] <= max_p)]
#     filtered["Di·ªán t√≠ch"] = pd.to_numeric(filtered["Di·ªán t√≠ch"], errors="coerce")
#     filtered = filtered[(filtered["Di·ªán t√≠ch"] >= min_a) & (filtered["Di·ªán t√≠ch"] <= max_a)]

#     if loai_hinh_search:
#         filtered = filtered[filtered["Lo·∫°i h√¨nh"].str.contains(loai_hinh_search, case=False, na=False)]
#     if du_an_search:
#         filtered = filtered[filtered["D·ª± √°n"].str.contains(du_an_search, case=False, na=False)]
#     if hien_trang_filter in ["C√≤n", "H·∫øt"]:
#         filtered = filtered[filtered["Hi·ªán tr·∫°ng"] == hien_trang_filter]

#     return filtered

# filtered = filter_data(df) if st.session_state.search_triggered else df.copy()

# # === Display Section ===
# st.header("üìã Danh s√°ch nh√†")
# if filtered.empty:
#     st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£")
# else:
#     for idx, row in filtered.iterrows():
#         st.markdown("---")
#         cols = st.columns([1, 2])
#         with cols[0]:
#             folder_path = row["Th∆∞ m·ª•c ·∫£nh"]
#             if os.path.exists(folder_path):
#                 for file in os.listdir(folder_path):
#                     try:
#                         img = Image.open(os.path.join(folder_path, file))
#                         st.image(img, width=IMAGE_WIDTH)
#                     except:
#                         pass
#         with cols[1]:
#             st.markdown(f"""
#                 **üè† Lo·∫°i h√¨nh:** {row['Lo·∫°i h√¨nh']}  
#                 **üì¶ D·ª± √°n:** {row['D·ª± √°n']}  
#                 **üí∞ Gi√°:** {row['Gi√°']}  
#                 **üìû SƒêT:** {row['SƒêT']}  
#                 **üìà L·ª£i nhu·∫≠n:** {row['L·ª£i nhu·∫≠n']}  
#                 **üìè Di·ªán t√≠ch:** {row.get('Di·ªán t√≠ch', '')} m¬≤  
#                 **üîÑ Hi·ªán tr·∫°ng:** {row.get('Hi·ªán tr·∫°ng', '')}  
#                 **üìù Ghi ch√∫:** {row['Notice']}
#             """)











import streamlit as st
import pandas as pd
import os
import shutil
import zipfile
import io
from PIL import Image
from datetime import datetime, timedelta

# === Constants ===
CSV_FILE = "du_lieu_bat_dong_san.csv"
IMAGE_DIR = "anh_nha"
SHARED_DIR = "chia_se"
BACKUP_DIR = "backups"
IMAGE_WIDTH = 120

# Ensure necessary directories
for d in [IMAGE_DIR, SHARED_DIR, BACKUP_DIR]:
    os.makedirs(d, exist_ok=True)

# === Load or Create DataFrame ===
if os.path.exists(CSV_FILE):
    df = pd.read_csv(CSV_FILE)
else:
    df = pd.DataFrame(columns=[
        "Lo·∫°i h√¨nh", "D·ª± √°n", "Gi√°", "Di·ªán t√≠ch", "SƒêT", "L·ª£i nhu·∫≠n", "Notice", "Th∆∞ m·ª•c ·∫£nh"
    ])

def save_data():
    df.to_csv(CSV_FILE, index=False)

# === Backup Function ===
def create_backup():
    today = datetime.today()
    # Save CSV
    csv_backup_name = today.strftime("%Y%m%d") + "_backup.csv"
    df.to_csv(os.path.join(BACKUP_DIR, csv_backup_name), index=False)
    # Save images as ZIP
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, "w", zipfile.ZIP_DEFLATED) as zip_file:
        for foldername, subfolders, filenames in os.walk(IMAGE_DIR):
            for filename in filenames:
                filepath = os.path.join(foldername, filename)
                arcname = os.path.relpath(filepath, IMAGE_DIR)
                zip_file.write(filepath, arcname)
    zip_backup_name = today.strftime("%Y%m%d") + "_images.zip"
    with open(os.path.join(BACKUP_DIR, zip_backup_name), "wb") as f:
        f.write(zip_buffer.getvalue())

# === Auto Backup if 3 days passed ===
def auto_backup():
    today = datetime.today()
    backups = sorted([f for f in os.listdir(BACKUP_DIR) if f.endswith("_backup.csv")])
    if backups:
        last_backup_date = datetime.strptime(backups[-1][:8], "%Y%m%d")
        if today - last_backup_date < timedelta(days=3):
            return  # Recent backup exists
    create_backup()

auto_backup()

# === Page setup ===
st.set_page_config(page_title="Qu·∫£n l√Ω BƒêS", layout="wide")
st.title("‚ù§Ô∏è Anh Y√™u Em ‚ù§Ô∏è")

# # === Show Last Backup Info ===
# backup_files = sorted([f for f in os.listdir(BACKUP_DIR) if f.endswith("_backup.csv")])
# if backup_files:
#     last_backup = backup_files[-1][:8]
#     st.info(f"üì¶ B·∫£n sao l∆∞u g·∫ßn nh·∫•t: `{last_backup}`")

# # === Manual Backup Button ===
# if st.button("üíæ Sao l∆∞u th·ªß c√¥ng"):
#     create_backup()
#     st.success("‚úÖ ƒê√£ sao l∆∞u th·ªß c√¥ng!")

# === UI States ===
for k in ["reset_form", "search_triggered", "edit_trigger", "edit_index"]:
    st.session_state.setdefault(k, False if k != "edit_index" else None)

# === Reset Form Logic ===
if st.session_state.reset_form:
    for key in ["loai_hinh", "du_an", "price", "area", "phone", "profit", "notice"]:
        st.session_state[key] = ""
    st.session_state.reset_form = False

# === Add New House ===
st.header("‚ûï Th√™m d·ªØ li·ªáu")
with st.form("add_form"):
    col1, col2 = st.columns(2)
    with col1:
        loai_hinh = st.text_input("Lo·∫°i h√¨nh", key="loai_hinh")
        price = st.text_input("Gi√°", key="price")
        profit = st.text_input("L·ª£i nhu·∫≠n", key="profit")
        area = st.text_input("Di·ªán t√≠ch (m¬≤)", key="area")
    with col2:
        du_an = st.text_input("D·ª± √°n", key="du_an")
        phone = st.text_input("SƒêT", key="phone")
        notice = st.text_area("Ghi ch√∫", key="notice", height=80)

    uploaded_files = st.file_uploader("Upload ·∫£nh", accept_multiple_files=True, key="uploader")
    submitted = st.form_submit_button("üì• Th√™m nh√†")

    if submitted:
        try:
            price_val = float(price)
            area_val = float(area)
            folder_name = f"{loai_hinh}_{len(df)}"
            folder_path = os.path.join(IMAGE_DIR, folder_name)
            os.makedirs(folder_path, exist_ok=True)
            for uploaded_file in uploaded_files:
                with open(os.path.join(folder_path, uploaded_file.name), "wb") as f:
                    f.write(uploaded_file.read())
            new_data = {
                "Lo·∫°i h√¨nh": loai_hinh,
                "D·ª± √°n": du_an,
                "Gi√°": price_val,
                "Di·ªán t√≠ch": area_val,
                "SƒêT": phone,
                "L·ª£i nhu·∫≠n": profit,
                "Notice": notice,
                "Th∆∞ m·ª•c ·∫£nh": folder_path
            }
            df = pd.concat([df, pd.DataFrame([new_data])], ignore_index=True)
            save_data()
            st.success("‚úÖ ƒê√£ th√™m nh√†.")
            st.session_state.reset_form = True
            st.rerun()
        except ValueError:
            st.error("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng Gi√° v√† Di·ªán t√≠ch.")

# === Search & Display Houses ===
st.header("üîç T√¨m ki·∫øm nh√†")
col1, col2, col3, col4 = st.columns(4)
with col1:
    loai_hinh_search = st.text_input("Lo·∫°i h√¨nh", key="search_loai_hinh")
with col2:
    du_an_search = st.text_input("D·ª± √°n", key="search_du_an")
with col3:
    min_price = st.text_input("Gi√° t·ª´", key="min_price")
with col4:
    max_price = st.text_input("Gi√° ƒë·∫øn", key="max_price")

col5, col6 = st.columns(2)
with col5:
    min_area = st.text_input("Di·ªán t√≠ch t·ª´ (m¬≤)", key="min_area")
with col6:
    max_area = st.text_input("Di·ªán t√≠ch ƒë·∫øn (m¬≤)", key="max_area")

if st.button("üîé T√¨m"):
    st.session_state.search_triggered = True

def filter_data(df):
    result = df.copy()
    try:
        min_p = float(min_price) if min_price else 0
        max_p = float(max_price) if max_price else float("inf")
    except:
        st.error("‚ùå Gi√° kh√¥ng h·ª£p l·ªá")
        return pd.DataFrame()
    try:
        min_a = float(min_area) if min_area else 0
        max_a = float(max_area) if max_area else float("inf")
    except:
        st.error("‚ùå Di·ªán t√≠ch kh√¥ng h·ª£p l·ªá")
        return pd.DataFrame()
    if loai_hinh_search:
        result = result[result["Lo·∫°i h√¨nh"].str.contains(loai_hinh_search, case=False, na=False)]
    if du_an_search:
        result = result[result["D·ª± √°n"].str.contains(du_an_search, case=False, na=False)]
    result = result[(result["Gi√°"] >= min_p) & (result["Gi√°"] <= max_p)]
    result = result[(result["Di·ªán t√≠ch"] >= min_a) & (result["Di·ªán t√≠ch"] <= max_a)]
    return result

filtered = filter_data(df) if st.session_state.search_triggered else df.copy()

st.header("üìã Danh s√°ch nh√†")
if filtered.empty:
    st.warning("Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£.")
else:
    for idx, row in filtered.iterrows():
        st.markdown("---")
        c1, c2 = st.columns([1, 2])
        with c1:
            folder_path = row["Th∆∞ m·ª•c ·∫£nh"]
            if os.path.exists(folder_path):
                images = [Image.open(os.path.join(folder_path, f)) for f in os.listdir(folder_path) if f.lower().endswith(('png', 'jpg', 'jpeg'))]
                st.image(images, width=IMAGE_WIDTH)
        with c2:
            st.markdown(f"""
            **üè† Lo·∫°i h√¨nh:** {row['Lo·∫°i h√¨nh']}  
            **üì¶ D·ª± √°n:** {row['D·ª± √°n']}  
            **üí∞ Gi√°:** {row['Gi√°']}  
            **üìê Di·ªán t√≠ch:** {row['Di·ªán t√≠ch']} m¬≤  
            **üìû SƒêT:** {row['SƒêT']}  
            **üìà L·ª£i nhu·∫≠n:** {row['L·ª£i nhu·∫≠n']}  
            **üìù Ghi ch√∫:** {row['Notice']}
            """)
            b1, b2, b3 = st.columns(3)
            with b1:
                if st.button("üì§ Chia s·∫ª", key=f"share_{idx}"):
                    share_folder = os.path.join(SHARED_DIR, f"{row['Lo·∫°i h√¨nh']}_{idx}")
                    os.makedirs(share_folder, exist_ok=True)
                    with open(os.path.join(share_folder, "thong_tin.txt"), "w", encoding="utf-8") as f:
                        f.write(
                            f"üè† Lo·∫°i h√¨nh: {row['Lo·∫°i h√¨nh']}\n"
                            f"üì¶ D·ª± √°n: {row['D·ª± √°n']}\n"
                            f"üí∞ Gi√°: {row['Gi√°']}\n"
                            f"üìê Di·ªán t√≠ch: {row['Di·ªán t√≠ch']} m¬≤\n"
                            f"üìù Ghi ch√∫: {row['Notice']}"
                        )
                    for f in os.listdir(folder_path):
                        shutil.copy(os.path.join(folder_path, f), share_folder)
                    st.success(f"‚úÖ ƒê√£ chia s·∫ª t·∫°i: {share_folder}")
            with b2:
                if st.button("üóëÔ∏è X√≥a", key=f"del_{idx}"):
                    shutil.rmtree(folder_path)
                    df.drop(idx, inplace=True)
                    df.reset_index(drop=True, inplace=True)
                    save_data()
                    st.rerun()
            with b3:
                if st.button("‚úèÔ∏è Ch·ªânh s·ª≠a", key=f"edit_{idx}"):
                    st.session_state.edit_index = idx
                    st.session_state.edit_trigger = True
                    st.rerun()

# === Restore from CSV + ZIP ===
st.header("üì• Kh√¥i ph·ª•c d·ªØ li·ªáu t·ª´ b·∫£n sao l∆∞u")
csv_restore = st.file_uploader("T·∫£i l√™n file CSV", type=["csv"], key="restore_csv")
zip_restore = st.file_uploader("T·∫£i l√™n file ZIP ·∫£nh", type=["zip"], key="restore_zip")

if st.button("‚ôªÔ∏è Ph·ª•c h·ªìi d·ªØ li·ªáu"):
    if csv_restore and zip_restore:
        try:
            df = pd.read_csv(csv_restore)
            save_data()
            shutil.rmtree(IMAGE_DIR)
            os.makedirs(IMAGE_DIR, exist_ok=True)
            zip_file = zipfile.ZipFile(zip_restore)
            zip_file.extractall(IMAGE_DIR)
            st.success("‚úÖ Ph·ª•c h·ªìi th√†nh c√¥ng!")
            st.rerun()
        except Exception as e:
            st.error(f"‚ùå L·ªói khi ph·ª•c h·ªìi: {e}")
    else:
        st.warning("‚ö†Ô∏è C·∫ßn c·∫£ file CSV v√† ZIP ·∫£nh ƒë·ªÉ ph·ª•c h·ªìi.")

# === Download Section ===
st.header("üíΩ T·∫£i xu·ªëng d·ªØ li·ªáu")
csv_export = df.to_csv(index=False).encode("utf-8-sig")
st.download_button("‚¨áÔ∏è T·∫£i xu·ªëng CSV", data=csv_export, file_name="du_lieu_bat_dong_san.csv", mime="text/csv")

def zip_all_images():
    buf = io.BytesIO()
    with zipfile.ZipFile(buf, "w", zipfile.ZIP_DEFLATED) as z:
        for folder, _, files in os.walk(IMAGE_DIR):
            for f in files:
                path = os.path.join(folder, f)
                arcname = os.path.relpath(path, IMAGE_DIR)
                z.write(path, arcname)
    buf.seek(0)
    return buf

if os.listdir(IMAGE_DIR):
    image_zip = zip_all_images()
    st.download_button("üñºÔ∏è T·∫£i xu·ªëng ·∫£nh", data=image_zip, file_name="anh_nha.zip", mime="application/zip")


# === Edit Form ===
if st.session_state.edit_trigger and st.session_state.edit_index is not None:
    st.header("‚úèÔ∏è Ch·ªânh s·ª≠a th√¥ng tin nh√†")
    edit_idx = st.session_state.edit_index
    edit_row = df.loc[edit_idx]

    with st.form("edit_form"):
        col1, col2 = st.columns(2)
        with col1:
            new_loai_hinh = st.text_input("Lo·∫°i h√¨nh", value=edit_row["Lo·∫°i h√¨nh"])
            new_price = st.text_input("Gi√°", value=str(edit_row["Gi√°"]))
            new_profit = st.text_input("L·ª£i nhu·∫≠n", value=edit_row["L·ª£i nhu·∫≠n"])
            new_area = st.text_input("Di·ªán t√≠ch (m¬≤)", value=str(edit_row["Di·ªán t√≠ch"]))
        with col2:
            new_du_an = st.text_input("D·ª± √°n", value=edit_row["D·ª± √°n"])
            new_phone = st.text_input("SƒêT", value=edit_row["SƒêT"])
            new_notice = st.text_area("Ghi ch√∫", value=edit_row["Notice"], height=80)

        uploaded_edit_files = st.file_uploader(
            "Upload ·∫£nh m·ªõi (n·∫øu mu·ªën ghi ƒë√®)",
            accept_multiple_files=True,
            type=['png', 'jpg', 'jpeg', 'tif'],
            key=f"edit_uploader_{edit_idx}"
        )

        submitted_edit = st.form_submit_button("üíæ L∆∞u thay ƒë·ªïi")

        if submitted_edit:
            try:
                new_price_val = float(new_price)
                new_area_val = float(new_area)
                # Update info
                df.at[edit_idx, "Lo·∫°i h√¨nh"] = new_loai_hinh
                df.at[edit_idx, "D·ª± √°n"] = new_du_an
                df.at[edit_idx, "Gi√°"] = new_price_val
                df.at[edit_idx, "Di·ªán t√≠ch"] = new_area_val
                df.at[edit_idx, "SƒêT"] = new_phone
                df.at[edit_idx, "L·ª£i nhu·∫≠n"] = new_profit
                df.at[edit_idx, "Notice"] = new_notice

                # Handle image replacement
                edit_folder_path = df.at[edit_idx, "Th∆∞ m·ª•c ·∫£nh"]
                if uploaded_edit_files:
                    for f in os.listdir(edit_folder_path):
                        os.remove(os.path.join(edit_folder_path, f))
                    for uploaded_file in uploaded_edit_files:
                        with open(os.path.join(edit_folder_path, uploaded_file.name), "wb") as f:
                            f.write(uploaded_file.read())

                save_data()
                st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!")
                st.session_state.edit_trigger = False
                st.session_state.edit_index = None
                st.rerun()

            except ValueError:
                st.error("‚ùå Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng Gi√° v√† Di·ªán t√≠ch.")
